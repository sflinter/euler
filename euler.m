(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Section:: *)
(*Euler 2*)


euler2[x_] := Module[{fib1, fib2, newterm, sum},
fib1 = 1;
fib2 = 2;
sum = 2;
newterm = 0;
While[newterm < x,
newterm = fib1 + fib2;
fib1 = fib2;
fib2 = newterm;
If[EvenQ[newterm], sum += newterm]
];
sum
]


(* ::Input:: *)
(*euler2[4000000]*)


(* ::Section:: *)
(*Euler 19*)


euler19[x_, y_] := Module[{currentdate, sundays},
currentdate = x;
sundays = 0;
While[DateDifference[currentdate,y] > 0,
If[DateString[currentdate, {"DayName"}] == "Sunday",sundays++];
currentdate = DatePlus[currentdate, {1, "Month"}]
]
sundays
]


(* ::Input:: *)
(*euler19[{1901,1,1}, {2000,12,31}]*)


(* ::Input:: *)
(*If[{1900,1,1} < {1999, 12, 31}, 1, 0]*)


(* ::Input:: *)
(*ToString[1]*)


(* ::Input:: *)
(*ToWord[1]*)


(* ::Section:: *)
(*Euler 22*)


(* ::Text:: *)
(*Using names.txt (right click and' Save Link/Target As ...'), a 46 K text file containing over five - thousand first names, begin by sorting it into alphabetical order.Then working out the alphabetical value for each name, multiply this value by its alphabetical position in the list to obtain a name score.For example, when the list is sorted into alphabetical order, COLIN, which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938 th name in the list.So, COLIN would obtain a score of 938*53 = 49714.*)
(**)
(*What is the total of all the name scores in the file?*)


euler22 := Module[{s, charposn, wordval},
s = Sort[Import["~/src/euler/names.csv", "CSV"][[1]]];
charposn[x_] := x - 64;
wordval[x_] := Total[Map[charposn, ToCharacterCode[x]]];
Total[MapIndexed[Times, Map[wordval, s]]]
]


(* ::Input:: *)
(*euler22*)


(* ::Section:: *)
(*Euler 24*)


(* ::Text:: *)
(*A permutation is an ordered arrangement of objects.For example, 3124 is one possible permutation of the digits 1, 2, 3 and 4. If all of the permutations are listed numerically or alphabetically, we call it lexicographic order.The lexicographic permutations of 0, 1 and 2 are :*)
(*	012 021 102 120 201 210*)
(**)
(*What is the millionth lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?*)


euler24[x_] := Permutations[{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}][[x]]


(* ::Input:: *)
(*euler24[1000000]*)


(* ::Section:: *)
(*Euler 26*)


(* ::Text:: *)
(*A unit fraction contains 1 in the numerator.The decimal representation of the unit fractions with denominators 2 to 10 are given :*)
(*   ^(1)/_ (2) = 0.5*)
(*    ^(1)/_ (3) = 0. (3)*)
(*    ^(1)/_ (4) = 0.25*)
(*    ^(1)/_ (5) = 0.2*)
(*    ^(1)/_ (6) = 0.1 (6)*)
(*    ^(1)/_ (7) = 0. (142857)*)
(*    ^(1)/_ (8) = 0.125*)
(*    ^(1)/_ (9) = 0. (1)*)
(*    ^(1)/_ (10) = 0.1*)
(**)
(*Where 0.1 (6) means 0.166666 ..., and has a 1 - digit recurring cycle.It can be seen that^(1)/_ (7) has a 6 - digit recurring cycle.Find the value of d < 1000 for which^(1)/_ (d) contains the longest recurring cycle in its decimal fraction part.*)


euler26 := Module[{fractions},
fractions = Table[ Length[Flatten[RealDigits[1/i][[1]]]], {i, 1000}];
Position[fractions, Max[fractions]]
]


(* ::Input:: *)
(*euler26*)


(* ::Section:: *)
(*Euler 27*)


(* ::Text:: *)
(*Euler published the remarkable quadratic formula :*)
(*  n\.b2 + n + 41*)
(**)
(*It turns out that the formula will produce 40 primes for the consecutive values n = 0 to 39. However, when n = 40, 40^(2) + 40 + 41 = 40 (40 + 1) + 41 is divisible by 41, and certainly when n = 41, 41 \.b2 + 41 + 41 is clearly divisible by 41.*)
(**)
(*Using computers, the incredible formula n\.b2 \:2212 79 n + 1601 was discovered, which produces 80 primes for the consecutive values n = 0 to 79. The product of the coefficients, \:221279 and 1601, is \:2212 126479.*)
(**)
(*Considering quadratics of the form : n\.b2 + an + b, where | a | < 1000 and | b | < 1000*)
(**)
(*where | n | is the modulus/absolute value of n*)
(*e.g. | 11 | = 11 and | \:22124 | = 4*)
(**)
(*Find the product of the coefficients, a and b, for the quadratic expression that produces the maximum number of primes for consecutive values of n, starting with n = 0.*)
(**)


euler27 := Module[{arr, x, y},
numberprimes[a_, b_] := Module[{f, i, bprime},
bprime = Prime[b];
f = Function[n, n^2+a*n + bprime];
i = 0;
While[PrimeQ[f[i]], i; i++];
i
];
arr = Array[numberprimes, {2000, 168}, {-1000, 1}];
x = Position[arr, Max[Flatten[arr]]][[1,1]];
y = Position[arr, Max[Flatten[arr]]][[1,2]];
(x-1001) * Prime[y]
]


(* ::Input:: *)
(*euler27*)


(* ::Section:: *)
(*Euler 28*)


(* ::Text:: *)
(*Starting with the number 1 and moving to the right in a clockwise direction a 5 by 5 spiral is formed as follows : 21 22 23 24 25*)
(*20 7 8 9 10*)
(*19 6 1 2 11*)
(*18 5 4 3 12*)
(*17 16 15 14 13*)
(**)
(*It can be verified that the sum of both diagonals is 101.*)
(**)
(*What is the sum of both diagonals in a 1001 by 1001 spiral formed in the same way?*)


(* ::Input:: *)
(*spiralarray[arr_] := Module[{dim},*)
(*dim = Dimensions[arr][[1]];*)
(*AppendTo[arr[[1]],(dim^2)+1];*)
(*arr*)
(*]*)


(* ::Input:: *)
(*spiralarray[{{1,2},{4,3}}]*)


(* ::Section:: *)
(*Euler 30*)


(* ::Text:: *)
(*Surprisingly there are only three numbers that can be written as the sum of fourth powers of their digits : *)
(*1634 = 1^(4) + 6^(4) + 3^(4) + 4^(4)*)
(*8208 = 8^(4) + 2^(4) + 0^(4) + 8^(4)*)
(*9474 = 9^(4) + 4^(4) + 7^(4) + 4^(4)*)
(**)
(*As 1 = 1^(4) is not a sum it is not included.The sum of these numbers is 1634 + 8208 + 9474 = 19316.*)
(**)
(*Find the sum of all the numbers that can be written as the sum of fifth powers of their digits.*)


euler30:=Module[{count},
count=0;
For[i=10,i<1000000,i++,
If[Total[Power[#,5]&/@IntegerDigits[i]]==i,
Print[i];count+=i]
];
count
]


(* ::Input:: *)
(*euler30*)


(* ::Section:: *)
(*Euler 32*)


(* ::Text:: *)
(*We shall say that an n - digit number is pandigital if it makes use of all the digits 1 to n exactly once; for example, the 5 - digit number, 15234, is 1 through 5 pandigital.*)
(**)
(*The product 7254 is unusual, as the identity, 39*186 = 7254, containing multiplicand, multiplier, and product is 1 through 9 pandigital.*)
(**)
(*Find the sum of all products whose multiplicand/multiplier/product identity can be written as a 1 through 9 pandigital.*)
(**)
(*HINT : Some products can be obtained in more than one way so be sure to only include it once in your sum.*)


euler32:=Module[{Pandigital,l},
Pandigital[x_] := 
Sort[Flatten[Join[IntegerDigits/@x]]]=={1,2,3,4,5,6,7,8,9};
l={};
For[i=1000,i<10000,i++,
If[Pandigital[{i,#,i/#}],AppendTo[l,i]]&/@Divisors[i]
];
Total[Union[l]]
]


(* ::Input:: *)
(*euler32*)


(* ::Section:: *)
(*Euler  34*)


(* ::Text:: *)
(*145 is a curious number, as 1! + 4! + 5! = 1 + 24 + 120 = 145.*)
(**)
(*Find the sum of all numbers which are equal to the sum of the factorial of their digits.Note : as 1! = 1 and 2! = 2 are not sums they are not included.*)


euler34:=Module[{SumOfFactorials,sum},
SumOfFactorials[n_]:=Total[Factorial/@IntegerDigits[n]];
sum=0;
For[i=3,i<100000,i++,
If[SumOfFactorials[i]==i,sum+=i]
];
sum
]


(* ::Input:: *)
(*euler34*)


(* ::Section:: *)
(*Euler35*)


(* ::Text:: *)
(*The number, 197, is called a circular prime because all rotations of the digits : 197, 971, and 719, are themselves prime.There are thirteen such primes below 100 : 2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, and 97.*)
(**)
(*How many circular primes are there below one million?*)


CircularPrimeQ[n_] := Module[{digits},
If[PrimeQ[n],
digits = IntegerDigits[n];
For[i=1, i<Length[digits], i++,
digits = RotateRight[digits];
If[Not[PrimeQ[FromDigits[digits]]],
Return[False]]
];
True,
False
]
]


euler35[n_] := Module[{i, p, cp},
i=1;
p=Prime[i];
cp=0;
While[p < n,
If[CircularPrimeQ[p],
cp++
];
p=Prime[++i]
];
cp
]


(* ::Input:: *)
(*euler35[1000000]*)


(* ::Section:: *)
(*Euler 36*)


(* ::Text:: *)
(*The decimal number, 585 = Subscript[1001001001, 2] (binary), is palindromic in both bases.Find the sum of all numbers, less than one million, which are palindromic in base 10 and base 2.*)
(**)
(*(Please note that the palindromic number, in either base, may not include leading zeros.)*)
(**)


euler36:=Module[{PalindromeQ,BasesPalindromeQ,sum},
PalindromeQ[n_]:=PalindromeQ[n,10];
PalindromeQ[n_,b_]:=IntegerDigits[n,b]==Reverse[IntegerDigits[n,b]];
BasesPalindromeQ[n_]:=PalindromeQ[n]&&PalindromeQ[n,2];
sum=0;
For[i=1,i<1000000,i++,
If[BasesPalindromeQ[i],sum+=i]
];
sum
]


(* ::Input:: *)
(*euler36*)


(* ::Input:: *)
(*IntegerDigits[585,2]*)


(* ::Section:: *)
(*Euler 40*)


(* ::Text:: *)
(*An irrational decimal fraction is created by concatenating the positive integers : 0.123456789101112131415161718192021 ...*)
(**)
(*It can be seen that the 12th digit of the fractional part is 1.*)
(**)
(*If Subscript[d, n] represents the n^(th) digit of the fractional part, find the value of the following expression.*)
(*	Subscript[d, 1]*Subscript[d, 10]*Subscript[d, 100]*Subscript[d, 1000]*Subscript[d, 10000]*Subscript[d, 100000]*Subscript[d, 1000000]*)


euler40 := Module[{d},
  d = Flatten[IntegerDigits /@ Table[i, {i, 500000}]];
   d[[1]]*d[[10]] * d[[100]] * d[[1000]] * d[[10000]]* d[[100000]] * d[[1000000]]
  ]


(* ::Input:: *)
(*euler40*)


(* ::Section:: *)
(*Euler 41*)


(* ::Text:: *)
(*We shall say that an n - digit number is pandigital if it makes use of all the digits 1 to n exactly once.For example, 2143 is a 4 - digit pandigital and is also prime.What is the largest n - digit pandigital prime that exists?*)


euler41:=FromDigits[Permutations[{1,2,3,4,5,6,7}][[Max[Position[PrimeQ/@FromDigits/@Permutations[{1,2,3,4,5,6,7}],True]]]]]


(* ::Input:: *)
(*euler41*)


(* ::Section:: *)
(*Euler 43*)


(* ::Text:: *)
(*The number, 1406357289, is a 0 to 9 pandigital number because it is made up of each of the digits 0 to 9 in some order, but it also has a rather interesting sub - string divisibility property.*)
(*Let Subscript[d, 1] be the 1^st digit, Subscript[d, 2] be the 2^nd digit, and so on.In this way, we note the following :*)
(*   Subscript[d, 2] Subscript[d, 3] Subscript[d, 4] = 406 is divisible by 2*)
(*    Subscript[d, 3] Subscript[d, 4] Subscript[d, 5] = 063 is divisible by 3*)
(*    *d_ (4) d_ (5) d_ (6) = 635 is divisible by 5*)
(*    *d_ (5) d_ (6) d_ (7) = 357 is divisible by 7*)
(*    *d_ (6) d_ (7) d_ (8) = 572 is divisible by 11*)
(*    *d_ (7) d_ (8) d_ (9) = 728 is divisible by 13*)
(*    *d_ (8) d_ (9) d_ (10) = 289 is divisible by 17*)
(**)
(*Find the sum of all 0 to 9 pandigital numbers with this property.*)


euler43:=Module[{SubDivQ},
SubDivQ[l_List]:=
If[Count[Mod[FromDigits[l[[#;;#+2]]],Prime[#-1]]==0&/@Range[2,8],False]==0,FromDigits[l],0];
Total[SubDivQ/@Permutations[{0,1,2,3,4,5,6,7,8,9}]]
]


(* ::Input:: *)
(*euler43*)


(* ::Section:: *)
(*Euler 66*)


(* ::Text:: *)
(*Consider quadratic Diophantine equations of the form : x^2 \[Dash] Dy^2 = 1*)
(**)
(*For example, when D = 13, the minimal solution in x is 649^2 \[Dash] 13*180^2 = 1.*)
(**)
(*It can be assumed that there are no solutions in positive integers when D is square.By finding minimal solutions in x for D = {2, 3, 5, 6, 7}, we obtain the following : 3^2 \[Dash] 2*2^2 = 1*)
(*2^2 \[Dash] 3*1^2 = 1*)
(*9^2 \[Dash] 5*4^2 = 1*)
(*5^2 \[Dash] 6*2^2 = 1*)
(*8^2 \[Dash] 7*3^2 = 1*)
(**)
(*Hence, by considering minimal solutions in x for D <= 7, the largest x is obtained when D = 5.*)
(**)
(*Find the value of D <= 1000 in minimal solutions of x for which the largest value of x is obtained.*)


euler66 := Module[{t, dioph},
	dioph[d_] := FindInstance[x^2 - d*y^2 == 1 && x > 0 && y > 0, {x, y}, Integers][[1, 1, 2]];
	t = Table[dioph[i], {i, 1000}];
	Position[t, Max[t][[1]]]
  ]


(* ::Input:: *)
(*euler66*)


(* ::Section:: *)
(*Euler  57*)


(* ::Text:: *)
(*It is possible to show that the square root of two can be expressed as an infinite continued fraction.*)
(*	Sqrt[2] = 1 + 1/(2 + 1/(2 + 1/(2 + ...))) = 1.414213 ...*)
(**)
(*By expanding this for the first four iterations, we get : 1 + 1/2 = 3/2 = 1.5*)
(*1 + 1/(2 + 1/2) = 7/5 = 1.4*)
(*1 + 1/(2 + 1/(2 + 1/2)) = 17/12 = 1.41666 ...*)
(*1 + 1/(2 + 1/(2 + 1/(2 + 1/2))) = 41/29 = 1.41379 ...*)
(**)
(*The next three expansions are 99/70, 239/169, and 577/408, but the eighth expansion, 1393/985, is the first example where the number of digits in the numerator exceeds the number of digits in the denominator.In the first one - thousand expansions, how many fractions contain a numerator with more digits than denominator?*)


euler57[n_] := Module[{fract, count},
count=0;
For[i=1, i<= n, i++,
fract = 1+Nest[1/(2+#)&, 0, i];
If[Length[IntegerDigits[Numerator[fract]]] > Length[IntegerDigits[Denominator[fract]]],
count++
]
];
count
]


(* ::Input:: *)
(*euler57[1000]*)


(* ::Section:: *)
(*Euler 102*)


(* ::Text:: *)
(*Three distinct points are plotted at random on a Cartesian plane, for which - 1000 <= x, y <= 1000, such that a triangle is formed.Consider the following two triangles :*)
(*	A (-340, 495), B (-153, -910), C (835, -947)*)
(*	X (-175, 41), Y (-421, -714), Z (574, -645)*)
(**)
(*It can be verified that triangle ABC contains the origin, whereas triangle XYZ does not.Using triangles.txt (right click and' Save Link/Target As ...'), a 27 K text file containing the co - ordinates of one thousand "random" triangles, find the number of triangles for which the interior contains the origin.*)


euler102 := Module[{arr,InteriorQ,triangle},
arr=Import["~/src/euler/triangles.txt","Table"];
InteriorQ[t_]:=Module[{v0=t[[1]],v1=t[[2]]-t[[1]],v2=t[[-1]]-t[[1]],v={0,0}},
a=(Det[{v,v2}]-Det[{v0,v2}])/Det[{v1,v2}];
b=-(Det[{v,v1}]-Det[{v0,v1}])/Det[{v1,v2}];
a>0&&b>0&&a+b<1
];
triangle[row_] := {row[[{1,2}]],row[[{3,4}]],row[[{5,6}]]};
Count[InteriorQ /@ triangle /@ arr,True]
]


(* ::Input:: *)
(*euler102*)
